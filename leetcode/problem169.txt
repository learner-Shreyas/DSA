//brute force 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        for(int val: nums){
            int freq=0;
            for(int ele: nums){
                if(ele==val){
                    freq++;
                }
                
            }
            if(freq > n/2){
                return val;
            }
        }
    return -1;
    }
};


//optimising method
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int f=1;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int ans=nums[0];

        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]){
                f++;
            }else{
                f=1;
                ans=nums[i];
            }

            if(f>n/2){
                return ans;
            }
        }
        
            
    return ans;
    }
};

//moore's algo
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int f=0,ans=0;
        int n=nums.size();

        for(int i=0 ; i<n; i++){
            if(f == 0){
                ans= nums[i];
            }
            if(ans == nums[i]){
                f++;
            }
            else{
                f--;
            }
            
        }
           
    return ans;
    }
};